<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇文章</title>
    <url>/2021/01/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>这是一篇测试文章，没有后续~~~</p>
]]></content>
  </entry>
  <entry>
    <title>搭建个人博客</title>
    <url>/2021/03/31/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新手上路，多多指教</p>
<a id="more"></a>
<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li><p>安装<code>Git</code></p>
</li>
<li><p>安装<code>Nodejs</code></p>
<p>安装完成后查看<code>node</code>版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>查看<code>npm</code>包管理器版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>国内安装镜像源很慢，所以可以利用<code>npm</code>安装<code>cnpm</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Hexo框架搭建博客"><a href="#Hexo框架搭建博客" class="headerlink" title="Hexo框架搭建博客"></a>Hexo框架搭建博客</h2><ol>
<li><p>安装<code>hexo</code>框架</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li><p>查看是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_1.png" alt="pic_1"></p>
</li>
<li><p><code>Hexo</code>框架初始化：选择存放博客所有内容的文件夹，命令行中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_2.png" alt="pic_2"></p>
</li>
<li><p>本地启动博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器访问<a href="http://localhost:4000">http://localhost:4000</a> ，可以看到搭建成功</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_4.png" alt="pic_4"></p>
</li>
</ol>
<h2 id="博客进阶"><a href="#博客进阶" class="headerlink" title="博客进阶"></a>博客进阶</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><ol>
<li><p>命令行输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>查看是否新建文章成功</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_5.png" alt="pic_5"></p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_6.png" alt="pic_6"></p>
</li>
<li><p>接着输入以下命令，浏览器访问<a href="http://localhost:4000">http://localhost:4000</a> ，可以看到新建的文章已经上传</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p><strong>注：如果\source\_posts文件夹下没有任何文章，则访问会报错</strong></p>
</li>
</ol>
<h3 id="博客部署到GitHub"><a href="#博客部署到GitHub" class="headerlink" title="博客部署到GitHub"></a>博客部署到GitHub</h3><ol>
<li><p>新建<code>GitHub</code>仓库</p>
<p>注：一定要以<code>username.github.io</code>创建。假如我没有用<code>tankmanbeta.github.io</code>而是用了<code>jeeby.github.io</code>，那么当我浏览器访问博客的时候会出现404错误。这里并不是没有部署成功，而是把它部署在了这里:<code>http://tankmanbeta.github.io/jeeby.github.io</code>。所以，如果想直接<code>tankmanbeta.github.io</code>访问，那么就需要和用户名保持一致。</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_7.png" alt="pic_7"></p>
</li>
<li><p>修改本地<code>Hexo</code>目录下文件<code>_config.yml</code>，在最后添加如下代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">https://github.com/TankManBeta/tankmanbeta.github.io</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p>注：2020年10月1日起，<code>GitHub</code>把<code>master</code>分支换成<code>main</code>分支，据说与种族歧视有关。</p>
</li>
<li><p>安装<code>Git</code>部署的插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
<li><p>输入以下命令，完成博客在<code>GitHub</code>上的部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器访问<code>tankmanbeta.github.io</code>，成功访问</p>
<p><strong>注：每次部署都需要输入<code>GitHub</code>账号密码的解决方法：修改本地<code>Hexo</code>目录下文件<code>_config.yml</code>的<code>deploy</code>属性：（需要先设置<code>SSH-key</code>）</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:TankManBeta/tankmanbeta.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="博客主题更改"><a href="#博客主题更改" class="headerlink" title="博客主题更改"></a>博客主题更改</h3><ol>
<li><p>主题选取地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
</li>
<li><p>在博客根目录下的<code>themes</code>文件夹下克隆主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next</span><br></pre></td></tr></table></figure></li>
<li><p>打开本地<code>Hexo</code>目录下文件<code>_config.yml</code>，修改<code>theme</code>属性：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-next</span></span><br></pre></td></tr></table></figure>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_8.png" alt="pic_8"></p>
</li>
<li><p>输入以下命令，更新博客在<code>GitHub</code>上的部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器访问<code>tankmanbeta.github.io</code>，可以看到主题更新成功</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_9.png" alt="pic_9"></p>
</li>
</ol>
<h3 id="Next主题切换"><a href="#Next主题切换" class="headerlink" title="Next主题切换"></a>Next主题切换</h3><ol>
<li>打开<code>next</code>主题下的<code>_config.yml</code>文件，修改<code>theme</code>属性，将其选择成自己想要的</li>
<li>重新部署，步骤同上</li>
</ol>
<h3 id="中英文切换"><a href="#中英文切换" class="headerlink" title="中英文切换"></a>中英文切换</h3><ol>
<li>打开博客根目录下的<code>_config.yml</code>文件，修改<code>Site</code>属性下的<code>language</code>，将其改成<code>zh-CN</code>即可</li>
<li>重新部署，步骤同上</li>
<li>同理可以更改<code>title</code>、<code>author</code>等</li>
</ol>
<h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><ol>
<li><p>在博客根目录下打开<code>cmd</code>，使用<code>hexo new page tags</code>新建一个页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_10.png" alt="pic_10"></p>
</li>
<li><p>打开新建的页面，将页面的类型设置为<code>tags</code></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">title: tags</span></span><br><span class="line"><span class="section">date: 2021-03-31 11:20:38</span></span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改Next主题下的<code>_config.yml</code>，将<code>tags</code>添加到<code>menu</code>属性当中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure></li>
<li><p>重新部署，步骤同上，刷新页面后的结果</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_11.png" alt="pic_11"></p>
</li>
<li><p><code>home</code>、<code>categories</code>、<code>archives</code>等操作也是相同的</p>
</li>
</ol>
<h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><ol>
<li><p>打开博客根目录，添加博客搜索插件，在<code>cmd</code>中输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>安装成功：</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_12.png" alt="pic_12"></p>
</li>
<li><p>打开博客根目录下的<code>_config.yml</code>，在任意位置添加以下配置（有教程说新版的<code>hexo</code>中，<code>search.xml</code>需要改成<code>search.json</code>，否则部署到服务器搜索图标不能正常显示）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search Config</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改Next主题下的<code>_config.yml</code>，修改<code>local_search</code>属性下的<code>enable</code>，将其改为<code>true</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>重新部署，步骤同上</li>
</ol>
<h3 id="使用外链图片"><a href="#使用外链图片" class="headerlink" title="使用外链图片"></a>使用外链图片</h3><ol>
<li><p>注册腾讯云账号，选择对象存储</p>
</li>
<li><p>创建存储桶</p>
</li>
<li><p>创建成功之后上传文件</p>
</li>
<li><p>修改安全管理中的防盗链设置</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_13.png" alt="pic_13"></p>
</li>
<li><p>修改权限管理中的存储桶访问权限</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_14.png" alt="pic_14"></p>
</li>
<li><p>上传图片至存储桶，复制详情中的对象地址</p>
</li>
<li><p>在文章中使用外链</p>
</li>
<li><p>重新部署，步骤同上</p>
</li>
</ol>
<h3 id="增加统计信息"><a href="#增加统计信息" class="headerlink" title="增加统计信息"></a>增加统计信息</h3><ol>
<li><p>打开博客根目录，添加博客搜索插件，在<code>cmd</code>中输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>打开博客根目录下的<code>_config.yml</code>，在任意位置添加以下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span> <span class="comment"># 所有文章总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span> <span class="comment"># 所有文章阅读中时长</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>修改Next主题下的<code>_config.yml</code>，修改如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>重新部署，步骤同上</li>
</ol>
<h3 id="使用PicGo上传图片至图床"><a href="#使用PicGo上传图片至图床" class="headerlink" title="使用PicGo上传图片至图床"></a>使用PicGo上传图片至图床</h3><ol>
<li><p>下载PicGo，下载地址<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases </a> </p>
</li>
<li><p>腾讯云新建密钥：[访问密钥]—&gt;[API密钥管理]—&gt;[新建密钥]</p>
</li>
<li><p>打开安装完成后的PicGo，进行图床设置，设置后的结果为</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/pic_15.png" alt="pic_15"></p>
</li>
<li><p>点击确定并设置为默认图床，拖动本地图片上传，即可成功</p>
</li>
<li>文章中可以直接使用刚刚产生的外链</li>
<li>重新部署，步骤同上</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习总结</title>
    <url>/2021/04/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>小白上路啦！</p>
<a id="more"></a>
<h1 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h1><h2 id="学习方式分类"><a href="#学习方式分类" class="headerlink" title="学习方式分类"></a>学习方式分类</h2><ul>
<li>监督学习</li>
<li>无监督学习</li>
<li>半监督学习</li>
<li>强化学习</li>
</ul>
<h2 id="学习结果分类"><a href="#学习结果分类" class="headerlink" title="学习结果分类"></a>学习结果分类</h2><ul>
<li>回归</li>
<li>分类</li>
</ul>
<h1 id="模型学习"><a href="#模型学习" class="headerlink" title="模型学习"></a>模型学习</h1><h2 id="线性回归模型"><a href="#线性回归模型" class="headerlink" title="线性回归模型"></a>线性回归模型</h2><h3 id="线性回归模型特点"><a href="#线性回归模型特点" class="headerlink" title="线性回归模型特点"></a>线性回归模型特点</h3><ul>
<li>线性回归时一种回归算法</li>
<li>模型简单、计算量较小</li>
<li>对误差敏感</li>
<li>对数据预处理要求较高</li>
</ul>
<h3 id="线性回归模型主要思想"><a href="#线性回归模型主要思想" class="headerlink" title="线性回归模型主要思想"></a>线性回归模型主要思想</h3><p>通过运用该简单的线性函数，可模拟<code>x</code>和<code>y</code>之间的关系。关键在于该函数不仅与输入变量x成线性关系，而且与参数<code>a</code>、<code>b</code>成线性关系。当前目标是确定最符合训练数据的参数<code>a</code>和<code>b</code>的值。</p>
<p>这可通过测量每个输入x的实际目标值<code>y</code>和模型<script type="math/tex">f(x)</script>之间的失配来实现，并将失配最小化。这种失配（=最小值）被称为误差函数。</p>
<p>有多种误差函数可供选择，但其中最简单的要数<code>RSS</code>，即每个数据点x对应的模型<script type="math/tex">f(x)</script>与目标值y的误差平方和。</p>
<script type="math/tex; mode=display">
 RSS=\sum_{i=1}^{N}(f(x_{i})-y_{i})^{2}=\sum_{i=1}^{N}((wx_{i}+b)-y_{i})^{2}</script><p>对于<code>w</code>,<code>b​</code>作为自变量，取何值时，<code>RSS</code>最小？转化为求极值问题，极值点偏导为0。</p>
<p>避免过拟合，引入正则化技术（将参数作为项加入损失函数）</p>
<p>==L1正则化（LASSO回归）：具有稀疏作用==</p>
<script type="math/tex; mode=display">
 J(\theta)=\frac{1}{2}\sum_{i}(y^{(i)}-\theta^{T}x^{(i)})^{2}+\sum|\theta|</script><p>==L2正则化（Ridge回归）：收敛更快==</p>
<script type="math/tex; mode=display">
 J(\theta)=\frac{1}{2}\sum_{i}(y^{(i)}-\theta^{T}x^{(i)})^{2}+\sum||\theta||</script><h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h3><ul>
<li>评估是否准确：查看在训练集上的准确率</li>
<li>评估泛化性能：查看在测试集（<code>K</code>折）上的准确率</li>
</ul>
<h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><ul>
<li><p>更新规则（多个$\theta$同时更新）：</p>
<script type="math/tex; mode=display">
\theta_{j}:=\theta_{j}-\alpha\frac{\partial}{\partial\theta_{j}}J(\theta)</script></li>
<li><p>$\alpha$太小，$J(\theta)$收敛太慢；$\alpha$太大，$J(\theta)$也许每次迭代不会减少或者不会收敛</p>
</li>
<li><p>注意特征缩放，使得特征在相似的范围</p>
</li>
</ul>
<h3 id="正规方程法"><a href="#正规方程法" class="headerlink" title="正规方程法"></a>正规方程法</h3><script type="math/tex; mode=display">
\theta = (X^{T}X)^{-1}X^{T}y</script><h2 id="logistic回归模型"><a href="#logistic回归模型" class="headerlink" title="logistic回归模型"></a>logistic回归模型</h2><h3 id="logistic回归模型特点"><a href="#logistic回归模型特点" class="headerlink" title="logistic回归模型特点"></a>logistic回归模型特点</h3><ul>
<li>logistic回归是一种分类算法</li>
<li>模型简单、计算量较小</li>
<li>对异常数据点并不敏感</li>
<li>对数据预处理要求较高</li>
</ul>
<h3 id="logistic回归模型主要思想"><a href="#logistic回归模型主要思想" class="headerlink" title="logistic回归模型主要思想"></a>logistic回归模型主要思想</h3><h4 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h4><p>sigmoid函数的数学形式是：</p>
<script type="math/tex; mode=display">
 g(x)=\frac{ 1 }{ 1 + e^{-x} }</script><p>对应的函数曲线如下图：</p>
<p><img src="https://my-pic-storage-1305445540.cos.ap-nanjing.myqcloud.com/sigmoid.png" alt="sigmod.png"></p>
<h4 id="决策函数"><a href="#决策函数" class="headerlink" title="决策函数"></a>决策函数</h4><p>一个机器学习的模型，实际上是把决策函数限定在某一组条件下，这组限定条件就决定了模型的假设空间。当然，我们还希望这组限定条件简单而合理。而逻辑回归模型所做的假设是：</p>
<script type="math/tex; mode=display">
P(y=1|x;\theta)=g(\theta^{T}x)=\frac{1}{1+e^{-\theta^{T}*x}}</script><p>这里的 <script type="math/tex">g(h)</script> 是上边提到的<code>sigmoid</code>函数，相应的决策函数为：</p>
<script type="math/tex; mode=display">
y^{*}=1,ifP(y=1|x)>0.5</script><p>选择<code>0.5</code>作为阈值是一个一般的做法，实际应用时特定的情况可以选择不同阈值，如果对正例的判别准确性要求高，可以选择阈值大一些，对正例的召回要求高，则可以选择阈值小一些。（根据<code>sigmod</code>函数，即$\theta^{T}x&gt;0$）</p>
<h4 id="参数求解"><a href="#参数求解" class="headerlink" title="参数求解"></a>参数求解</h4><p>模型的数学形式确定后，剩下就是如何去求解模型中的参数。统计学中常用的一种方法是最大似然估计，即找到一组参数，使得在这组参数下，我们的数据的似然度（概率）越大。在逻辑回归模型中，似然度可表示为：</p>
<script type="math/tex; mode=display">
L(\theta)=P(D|\theta)=\prod{P(y|x;\theta)}=\prod{g(\theta^{T}x)^y(1-g(\theta^{T}x))^{1-y}}</script><p>取对数可以得到对数似然度：</p>
<script type="math/tex; mode=display">
l(\theta)=\sum{y\log{g(\theta^{T}x)}}+(1-y)\log{(1-g(\theta^{T}x))}</script>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>毕设知识点总结</title>
    <url>/2021/04/06/%E6%AF%95%E8%AE%BE%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>毕设的项目也算是做完了，总结一下项目过程中遇见的一些问题和解决方案，避免以后再次踩坑。</p>
<a id="more"></a>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="current-user的实现机制"><a href="#current-user的实现机制" class="headerlink" title="current_user的实现机制"></a>current_user的实现机制</h2><ol>
<li><p>首先需要创建一个<code>LoginManager</code>的对象实例并注册到<code>app</code>对象实例之中，并提供一个<code>load_user</code>回调函数来获取当前登录的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会话管理</span></span><br><span class="line">login_manager = LoginManager()</span><br><span class="line"><span class="comment"># 绑定登陆视图的路由</span></span><br><span class="line">login_manager.login_view = <span class="string">&quot;login&quot;</span></span><br><span class="line">login_manager.login_message = <span class="string">&quot;请您先登陆！&quot;</span></span><br><span class="line">login_manager.session_protection = <span class="string">&quot;strong&quot;</span></span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;123456&quot;</span></span><br><span class="line">login_manager.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_manager.user_loader</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> User.query.filter_by(user_id=user_id).first()</span><br></pre></td></tr></table></figure>
<p>注：<code>load_user</code>接受一个<code>unicode</code>编码的 <code>ID</code>并返回一个用户对象，如果用户不存在就返回<code>None</code>。</p>
</li>
</ol>
<ol>
<li><p>接着你的<code>User</code>模型要继承<code>UserMixin</code>这个类，并且实现<code>is_authenticated</code>、<code>is_active</code>、<code>is_anonymous</code>、<code>get_id</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_authenticated</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_active</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_anonymous</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面login_user用来作为用户的id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_id</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.user_id</span><br></pre></td></tr></table></figure></li>
<li><p>在登陆时调用<code>login_user</code>方法，然后就可以在上下文之中随时随地使用<code>current_user</code>了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_user</span>(<span class="params">user, remember=<span class="literal">False</span>, force=<span class="literal">False</span>, fresh=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> <span class="keyword">not</span> user.is_active:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    user_id = <span class="built_in">getattr</span>(user, current_app.login_manager.id_attribute)()</span><br><span class="line">    session[<span class="string">&#x27;user_id&#x27;</span>] = user_id</span><br><span class="line">    session[<span class="string">&#x27;_fresh&#x27;</span>] = fresh</span><br><span class="line">    session[<span class="string">&#x27;_id&#x27;</span>] = current_app.login_manager._session_identifier_generator()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remember:</span><br><span class="line">        session[<span class="string">&#x27;remember&#x27;</span>] = <span class="string">&#x27;set&#x27;</span></span><br><span class="line"></span><br><span class="line">    _request_ctx_stack.top.user = user</span><br><span class="line">    user_logged_in.send(current_app._get_current_object(), user=_get_user())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>用户的<code>user_id</code>是通过<code>get_attr</code>方法访问<code>login_manager</code>的<code>id_attribute</code>属性实现的，而最终访问的<code>user_id</code>就是在上一步在模型中添加的<code>get_id</code>方法获取到的值</p>
</li>
</ol>
<h2 id="openpyxl对excel的操作"><a href="#openpyxl对excel的操作" class="headerlink" title="openpyxl对excel的操作"></a>openpyxl对excel的操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="comment"># 创建工作簿（默认创建一个工作表）</span></span><br><span class="line">new_excel = openpyxl.Workbook()</span><br><span class="line"><span class="comment"># 选中第一个工作簿</span></span><br><span class="line">work_sheet = new_excel.active</span><br><span class="line"><span class="comment"># 设置表头</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(optional_headers)):</span><br><span class="line">    work_sheet.cell(row=<span class="number">1</span>, column=i+<span class="number">1</span>, value=optional_headers[i]).alignment = Alignment(wrapText=<span class="literal">True</span>, horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    <span class="comment"># 填写内容</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data_list)):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data_list[<span class="number">0</span>])):</span><br><span class="line">        work_sheet.cell(row=j+<span class="number">2</span>, column=k+<span class="number">1</span>, value=data_list[j][k]).alignment = Alignment(wrapText=<span class="literal">True</span>, horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"><span class="comment"># 用时间戳给文件命名</span></span><br><span class="line">now_time = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d-%H-%M-%S&quot;</span>).replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">excel_name = current_user.user_name + <span class="string">&#x27;_&#x27;</span> + now_time + <span class="string">&#x27;_&#x27;</span></span><br><span class="line"><span class="keyword">if</span> data[<span class="string">&quot;export_type&quot;</span>] == <span class="number">0</span>:</span><br><span class="line">    excel_name = excel_name + <span class="string">&quot;专利信息.xls&quot;</span></span><br><span class="line"><span class="keyword">elif</span> data[<span class="string">&quot;export_type&quot;</span>] == <span class="number">1</span>:</span><br><span class="line">    excel_name = excel_name + <span class="string">&quot;论文信息.xls&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    excel_name = excel_name + <span class="string">&quot;项目信息.xls&quot;</span></span><br><span class="line">new_excel.save(<span class="string">&quot;.\\files\\&quot;</span> + excel_name)</span><br><span class="line">new_excel.close()</span><br></pre></td></tr></table></figure>
<h2 id="后端发送文件到前端"><a href="#后端发送文件到前端" class="headerlink" title="后端发送文件到前端"></a>后端发送文件到前端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = make_response(send_from_directory(<span class="string">&quot;.\\files&quot;</span>, excel_name))</span><br><span class="line">res.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain;charset=UTF-8&#x27;</span></span><br><span class="line">res.headers[<span class="string">&#x27;filename&#x27;</span>] = quote(excel_name.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="前端以POST方式请求下载文件"><a href="#前端以POST方式请求下载文件" class="headerlink" title="前端以POST方式请求下载文件"></a>前端以POST方式请求下载文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    url: <span class="built_in">window</span>.location.pathname,</span><br><span class="line">    contentType: <span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">    data:<span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">    xhrFields:&#123;</span><br><span class="line">        responseType: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">res, status, xhr</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res)&#123;</span><br><span class="line">            <span class="keyword">let</span> parse_data = <span class="keyword">new</span> Blob([res]);</span><br><span class="line">            <span class="keyword">let</span> download_url = <span class="built_in">window</span>.URL.createObjectURL(parse_data);</span><br><span class="line">            <span class="keyword">let</span> filename = xhr.getResponseHeader(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            link.href = download_url;</span><br><span class="line">            link.download = filename;</span><br><span class="line">            link.click();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="邮件及缓存"><a href="#邮件及缓存" class="headerlink" title="邮件及缓存"></a>邮件及缓存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message, Mail</span><br><span class="line"><span class="keyword">from</span> flask_caching <span class="keyword">import</span> Cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件</span></span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存</span></span><br><span class="line">cache = Cache(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成验证码</span></span><br><span class="line">code_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    random_num = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">    code_list.append(<span class="built_in">str</span>(random_num))</span><br><span class="line">verification_code = <span class="string">&#x27;&#x27;</span>.join(code_list)</span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line">message = Message(<span class="string">&#x27;科研信息管理系统验证码&#x27;</span>, recipients=[email_account], body=<span class="string">&#x27;您的验证码是：%s&#x27;</span> % verification_code)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 发送</span></span><br><span class="line">    mail.send(message)</span><br><span class="line">    <span class="comment"># 验证码放入缓存</span></span><br><span class="line">    cache.<span class="built_in">set</span>(email_account, verification_code)</span><br><span class="line">    data = <span class="string">&quot;验证码发送成功&quot;</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    data = <span class="string">&quot;验证码发送失败，请检查邮箱是否输入正确&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="推送flask上下文"><a href="#推送flask上下文" class="headerlink" title="推送flask上下文"></a>推送flask上下文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.app_context().push()</span><br></pre></td></tr></table></figure>
<h2 id="前端拖动插件dragula-js"><a href="#前端拖动插件dragula-js" class="headerlink" title="前端拖动插件dragula.js"></a>前端拖动插件dragula.js</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Modal Popup--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModalCenter&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;exampleModalCenterTitle&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-dialog-centered&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModalCenterTitle&quot;</span>&gt;</span>请选择需要导出的信息项<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bagger&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;includer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(161, 211, 169);&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% if patent_headers %&#125;</span><br><span class="line">                            &#123;% for item in patent_headers  %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            &#123;% endfor %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;includer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(187, 206, 235);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>可选信息项<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>已选信息项<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.col-sm-9 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /Modal Popup--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="前端省市区地址选择distpicker-js"><a href="#前端省市区地址选择distpicker-js" class="headerlink" title="前端省市区地址选择distpicker.js"></a>前端省市区地址选择distpicker.js</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-toggle</span>=<span class="string">&quot;distpicker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">data-province</span>=<span class="string">&quot;省&quot;</span> <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">data-city</span>=<span class="string">&quot;市&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">data-district</span>=<span class="string">&quot;区/县&quot;</span> <span class="attr">name</span>=<span class="string">&quot;district&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;详细通讯地址&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="前端表格datatable-js"><a href="#前端表格datatable-js" class="headerlink" title="前端表格datatable.js"></a>前端表格datatable.js</h2><ol>
<li><p>生成<code>datatable</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#select-all&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">atable = $(<span class="string">&#x27;#patent_table&#x27;</span>).dataTable();</span><br><span class="line">atable.fnClearTable(); <span class="comment">//清空一下table</span></span><br><span class="line">atable.fnDestroy();<span class="comment">//还原初始化了的datatable;</span></span><br><span class="line">$(<span class="string">&quot;#patent_table&quot;</span>).css(<span class="string">&#x27;display&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">btable = $(<span class="string">&#x27;#project_table&#x27;</span>).dataTable();</span><br><span class="line">btable.fnClearTable(); <span class="comment">//清空一下table</span></span><br><span class="line">btable.fnDestroy();<span class="comment">//还原初始化了的datatable;</span></span><br><span class="line">$(<span class="string">&quot;#project_table&quot;</span>).css(<span class="string">&#x27;display&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">$(<span class="string">&quot;#paper_table&quot;</span>).show();</span><br><span class="line">otable = $(<span class="string">&#x27;#paper_table&#x27;</span>).dataTable();</span><br><span class="line">otable.fnClearTable(); <span class="comment">//清空一下table</span></span><br><span class="line">otable.fnDestroy();<span class="comment">//还原初始化了的datatable;</span></span><br><span class="line">$(<span class="string">&quot;#paper_table tbody&quot;</span>).empty().append(table_data[<span class="string">&quot;html&quot;</span>]);</span><br><span class="line">$(<span class="string">&#x27;#paper_table&#x27;</span>).DataTable(&#123;</span><br><span class="line">    <span class="string">&quot;order&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;columnDefs&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;targets&quot;</span>: <span class="string">&#x27;no-sort&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;orderable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;lengthMenu&quot;</span>: [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>],</span><br><span class="line">    <span class="string">&quot;bAutoWidth&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>获取<code>datatable</code>被选中的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> table = $(<span class="string">&quot;#project_table&quot;</span>).dataTable();</span><br><span class="line"><span class="keyword">let</span> projects_delete = [];</span><br><span class="line"><span class="keyword">let</span> checked_collection = table.$(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]:checked&quot;</span>,&#123;<span class="string">&quot;page&quot;</span>:<span class="string">&quot;all&quot;</span>&#125;);</span><br><span class="line">checked_collection.each(<span class="function"><span class="keyword">function</span> (<span class="params">index, elem</span>) </span>&#123;</span><br><span class="line">    projects_delete.push($(elem).attr(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="前端柱状图"><a href="#前端柱状图" class="headerlink" title="前端柱状图"></a>前端柱状图</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>; <span class="comment">// Start of use strict</span></span><br><span class="line">    <span class="comment">//line Morris</span></span><br><span class="line">    <span class="keyword">var</span> lineMorris = <span class="keyword">new</span> Morris.Line(&#123;</span><br><span class="line">        element: <span class="string">&#x27;lineMorris&#x27;</span>,</span><br><span class="line">        resize: <span class="literal">true</span>,</span><br><span class="line">        data: paper_data,</span><br><span class="line">        xkey: <span class="string">&#x27;year&#x27;</span>,</span><br><span class="line">        ykeys: [<span class="string">&#x27;amounts&#x27;</span>],</span><br><span class="line">        labels: [<span class="string">&#x27;论文数量&#x27;</span>],</span><br><span class="line">        gridLineColor: <span class="string">&#x27;#eef0f2&#x27;</span>,</span><br><span class="line">        lineColors: [<span class="string">&#x27;#E57498&#x27;</span>],</span><br><span class="line">        lineWidth: <span class="number">2</span>,</span><br><span class="line">        hideHover: <span class="string">&#x27;auto&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//barmorris</span></span><br><span class="line">    <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">&quot;barMorris&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ctx === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> chart = Morris.Bar(&#123;</span><br><span class="line">        element: <span class="string">&#x27;barMorris&#x27;</span>,</span><br><span class="line">        data: project_data,</span><br><span class="line">        xkey: <span class="string">&#x27;year&#x27;</span>,</span><br><span class="line">        ykeys: [<span class="string">&#x27;amounts&#x27;</span>],</span><br><span class="line">        labels: [<span class="string">&#x27;项目数量&#x27;</span>],</span><br><span class="line">        barColors: [<span class="string">&#x27;#FF7D00&#x27;</span>],</span><br><span class="line">        barOpacity: <span class="number">1</span>,</span><br><span class="line">        barSizeRatio: <span class="number">0.5</span>,</span><br><span class="line">        hideHover: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">        gridLineColor: <span class="string">&#x27;#eef0f2&#x27;</span>,</span><br><span class="line">        resize: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// morris donut charts</span></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">&quot;#donutMorris&quot;</span>).length == <span class="number">1</span>) &#123;</span><br><span class="line">        Morris.Donut(&#123;</span><br><span class="line">            element: <span class="string">&#x27;donutMorris&#x27;</span>,</span><br><span class="line">            data: patent_data,</span><br><span class="line">            barSize: <span class="number">0.1</span>,</span><br><span class="line">            labelColor: <span class="string">&#x27;#3e5569&#x27;</span>,</span><br><span class="line">            resize: <span class="literal">true</span>, <span class="comment">//defaulted to true</span></span><br><span class="line">            colors: [<span class="string">&#x27;#FFAA2A&#x27;</span>, <span class="string">&#x27;#E57498&#x27;</span>, <span class="string">&#x27;#22c6ab&#x27;</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
<h2 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h2><ol>
<li><p><code>tkinter</code>制作简易主界面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让系统知道使用者看到的尺寸</span></span><br><span class="line">user32 = windll.user32</span><br><span class="line">user32.SetProcessDPIAware()</span><br><span class="line"><span class="comment"># 主窗体</span></span><br><span class="line">root = Tk()</span><br><span class="line">root.wm_attributes(<span class="string">&#x27;-topmost&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">root.title(<span class="string">&quot;文字识别&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;300x100&quot;</span>)</span><br><span class="line">root.resizable(width=<span class="literal">False</span>, height=<span class="literal">False</span>)</span><br><span class="line">new_menu = Menu(root)</span><br><span class="line">new_menu.add_command(label=<span class="string">&quot;开始识别&quot;</span>, command=cut)</span><br><span class="line">new_text = Text(root, show=<span class="literal">None</span>)</span><br><span class="line">new_text.place(width=<span class="number">300</span>, height=<span class="number">100</span>)</span><br><span class="line">root[<span class="string">&quot;menu&quot;</span>] = new_menu</span><br><span class="line"><span class="comment"># 识别之后的结果</span></span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>调用<code>ImageGrab.grab()</code>方法截全屏并处理选中区域</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 截图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>():</span></span><br><span class="line">    <span class="keyword">global</span> img</span><br><span class="line">    screen_cut()</span><br><span class="line">    img = cv2.imread(<span class="string">&#x27;screen.jpg&#x27;</span>)</span><br><span class="line">    cv2.namedWindow(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    cv2.setMouseCallback(<span class="string">&#x27;image&#x27;</span>, on_mouse)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;screen.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取整个屏幕</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">screen_cut</span>():</span></span><br><span class="line">    image = ImageGrab.grab()</span><br><span class="line">    image.save(<span class="string">&quot;screen.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据鼠标事件进行裁剪</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse</span>(<span class="params">event, x, y, flags, param</span>):</span></span><br><span class="line">    <span class="keyword">global</span> img, point1, point2</span><br><span class="line">    img2 = img.copy()</span><br><span class="line">    <span class="comment"># 左键点击</span></span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:</span><br><span class="line">        point1 = (x, y)</span><br><span class="line">        cv2.circle(img2, point1, <span class="number">10</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img2)</span><br><span class="line">    <span class="comment"># 按住左键拖曳</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_MOUSEMOVE <span class="keyword">and</span> (flags &amp; cv2.EVENT_FLAG_LBUTTON):</span><br><span class="line">        cv2.rectangle(img2, point1, (x, y), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img2)</span><br><span class="line">    <span class="comment"># 左键释放</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_LBUTTONUP:</span><br><span class="line">        point2 = (x, y)</span><br><span class="line">        cv2.rectangle(img2, point1, point2, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">5</span>)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img2)</span><br><span class="line">        min_x = <span class="built_in">min</span>(point1[<span class="number">0</span>], point2[<span class="number">0</span>])</span><br><span class="line">        min_y = <span class="built_in">min</span>(point1[<span class="number">1</span>], point2[<span class="number">1</span>])</span><br><span class="line">        width = <span class="built_in">abs</span>(point1[<span class="number">0</span>] - point2[<span class="number">0</span>])</span><br><span class="line">        height = <span class="built_in">abs</span>(point1[<span class="number">1</span>] - point2[<span class="number">1</span>])</span><br><span class="line">        cut_img = img[min_y:min_y+height, min_x:min_x+width]</span><br><span class="line">        <span class="comment"># 不存在则新建目录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;.\\photos&quot;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;.\\photos&#x27;</span>)</span><br><span class="line">        path = <span class="string">&#x27;.\\photos\\cut.png&#x27;</span></span><br><span class="line">        new_text.delete(<span class="number">0.0</span>, END)</span><br><span class="line">        cv2.imwrite(path, cut_img)</span><br><span class="line">        get_text_by_ocr(path)</span><br><span class="line">        new_text.insert(<span class="string">&quot;insert&quot;</span>, text)</span><br><span class="line">        cv2.waitKey(<span class="number">1000</span>)</span><br><span class="line">        cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>调用百度接口进行文字识别，<code>APP_ID</code>、<code>APP_KEY</code>、<code>SECRET_KEY</code>需要自己申请</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图片识别成文字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_text_by_ocr</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">global</span> text</span><br><span class="line">    client = AipOcr(APP_ID, APP_KEY, SECRET_KEY)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        image = f.read()</span><br><span class="line">        all_data = client.basicAccurate(image)</span><br><span class="line">        text = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, all_data[<span class="string">&quot;words_result_num&quot;</span>]):</span><br><span class="line">            text += all_data[<span class="string">&quot;words_result&quot;</span>][i][<span class="string">&quot;words&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>选取了request和selenium（自动化测试常用库，但用于爬虫简单易上手）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不显式打开浏览器以及不使用GPU加速</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">browser = webdriver.Chrome(self.executable_path, options=options)</span><br><span class="line"><span class="comment"># 使用xpath获取元素</span></span><br><span class="line">keywords = browser.find_element_by_xpath(<span class="string">&quot;//span[text()=&#x27;关键词：&#x27;]/following-sibling::p&quot;</span>).text</span><br><span class="line">keywords = browser.find_element_by_xpath(<span class="string">&quot;//span[contains(text(),&#x27;关键词：&#x27;)]&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="pyinstaller打包成exe报毒"><a href="#pyinstaller打包成exe报毒" class="headerlink" title="pyinstaller打包成exe报毒"></a>pyinstaller打包成exe报毒</h2><p>下面的方法可以完全不报毒，但是原理未知。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller -w 你的文件名.py --onefile</span><br></pre></td></tr></table></figure>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>前端上传：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#new_projects_submit&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#projects_upload&quot;</span>).click();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#projects_upload&quot;</span>).on(<span class="string">&quot;change&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#projects_confirm&quot;</span>).click();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#projects_confirm&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fileObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;projects_upload&quot;</span>).files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(fileObj) == <span class="string">&quot;undefined&quot;</span> || fileObj.size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;未选择文件,请重试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&quot;#projects_upload&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> formFile = <span class="keyword">new</span> FormData();</span><br><span class="line">    formFile.append(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;UploadVMKImagePath&quot;</span>);</span><br><span class="line">    formFile.append(<span class="string">&quot;file&quot;</span>, fileObj); <span class="comment">//加入文件对象</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/add/projects&quot;</span>,</span><br><span class="line">        data: formFile,</span><br><span class="line">        type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        cache: <span class="literal">false</span>, <span class="comment">//上传文件无需缓存</span></span><br><span class="line">        processData: <span class="literal">false</span>, <span class="comment">//用于对data参数进行序列化处理 这里必须false</span></span><br><span class="line">        contentType: <span class="literal">false</span>, <span class="comment">//必须</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>后端获取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = request.files.get(<span class="string">&#x27;file&#x27;</span>)  <span class="comment"># 获取文件</span></span><br><span class="line"><span class="keyword">if</span> file:</span><br><span class="line">    filename = file.filename</span><br><span class="line">    <span class="keyword">if</span> filename.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&quot;xls&quot;</span>, <span class="string">&quot;xlsx&quot;</span>]:</span><br><span class="line">        <span class="comment"># 用时间戳给文件命名</span></span><br><span class="line">        now_time = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d-%H-%M-%S&quot;</span>).replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        file_path = FILE_SAVE_PATH + <span class="string">&quot;\\&quot;</span> + now_time + <span class="string">&#x27;_&#x27;</span> + filename</span><br><span class="line">        file.save(file_path)</span><br></pre></td></tr></table></figure>
<h2 id="构造字典的方法"><a href="#构造字典的方法" class="headerlink" title="构造字典的方法"></a>构造字典的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cooperate_dict[i] = cooperate_dict.get(i, &#123;&#125;)</span><br><span class="line">cooperate_dict[i][<span class="string">&quot;patents&quot;</span>] = cooperate_dict[i].get(<span class="string">&quot;patents&quot;</span>, <span class="number">0</span>)</span><br><span class="line">cooperate_dict[i][<span class="string">&quot;papers&quot;</span>] = cooperate_dict[i].get(<span class="string">&quot;papers&quot;</span>, <span class="number">0</span>)</span><br><span class="line">cooperate_dict[i][<span class="string">&quot;projects&quot;</span>] = cooperate_dict[i].get(<span class="string">&quot;projects&quot;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">cooperate_dict[i][<span class="string">&quot;total&quot;</span>] = cooperate_dict[i].get(<span class="string">&quot;total&quot;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
